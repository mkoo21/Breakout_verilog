`timescale 1ns / 1ns // `timescale time_unit/time_precision 

module ball_control(input clk, input reset, input [3:0] BALL_HIT, input [1:0] WALL_HIT, output reg [8:0] cur_x, output reg [7:0] cur_y);
	//Clock @ 60 fps

	
	reg [3:0] current_state;
	reg signed [2:0] x_dir, y_dir;
	
	localparam  LEFT = 4'd1,
					UP_LEFT = 4'd2,
					UP_RIGHT = 4'd3,
					RIGHT = 4'd4,
					LEFT_DOWN = 4'd5,
					DOWN_LEFT = 4'd6,
					RIGHT_DOWN = 4'd7,
					DOWN_RIGHT = 4'd8;
					 
	always @(posedge clk) begin
		
		//check if ball has hit paddle
		if(BALL_HIT !== 0) current_state <= BALL_HIT;
		
		//check if ball has hit a wall
		case(WALL_HIT)
			2'd1:	if(x_dir < -x_dir) x_dir <= -x_dir; //left wall
			2'd2: if(y_dir < -y_dir) y_dir <= -y_dir; //top wall
			2'd3: if(x_dir > -x_dir) x_dir <= -x_dir; //right wall
			default: begin
			//assign (x,y) vector based on current direction
				case(current_state)
					LEFT: begin
						x_dir <= -8'd2;
						y_dir <= -8'd1;
					end
					UP_LEFT: begin
						x_dir <= -8'd1;
						y_dir <= -8'd2;
					end
					UP_RIGHT: begin
						x_dir <= 8'd1;
						y_dir <= -8'd2;
					end
					RIGHT: begin
						x_dir <= 8'd2;
						y_dir <= -8'd1;
					end
					LEFT_DOWN: begin
						x_dir <= -8'd2;
						y_dir <= 8'd1;
					end
					DOWN_LEFT: begin
						x_dir <= -8'd1;
						y_dir <= 8'd2;
					end
					RIGHT_DOWN: begin
						x_dir <= 8'd2;
						y_dir <= 8'd1;
					end
					DOWN_RIGHT: begin
						x_dir <= 8'd1;
						y_dir <= 8'd2;
					end
				endcase
			end
		endcase
		
		if(!reset) begin
			cur_x <= 8'd159;
			cur_y <= 8'd225;
			if(!reset) current_state <= 4'd4; //default direction is right
		end
		else begin
			//increment x or y by the current vector
			cur_x <= cur_x + x_dir;
			cur_y <= cur_y + y_dir;
		end
		
	end
	

endmodule